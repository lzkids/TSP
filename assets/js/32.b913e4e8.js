(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{386:function(e,t,v){"use strict";v.r(t);var _=v(45),s=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"vue组件通信有哪些方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue组件通信有哪些方式"}},[e._v("#")]),e._v(" vue组件通信有哪些方式")]),e._v(" "),v("h2",{attrs:{id:"_1-props-、-emit-适用于父子组件场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-props-、-emit-适用于父子组件场景"}},[e._v("#")]),e._v(" 1."),v("code",[e._v("props")]),e._v(" 、"),v("code",[e._v("$emit")]),e._v(" [适用于父子组件场景]")]),e._v(" "),v("p",[e._v("​    1.1父组件向子组件传值（子组件通过props接收）")]),e._v(" "),v("p",[e._v("​    1.2子组件向父组件传值（通过$emit事件形成）")]),e._v(" "),v("h2",{attrs:{id:"_2-中央事件总线-eventbus-适用于兄弟组件通讯-emit-on"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-中央事件总线-eventbus-适用于兄弟组件通讯-emit-on"}},[e._v("#")]),e._v(" 2.中央事件总线 EventBus[适用于兄弟组件通讯] （"),v("code",[e._v("$emit")]),e._v(" / "),v("code",[e._v("$on")]),e._v("）")]),e._v(" "),v("p",[e._v("​     2.1"),v("code",[e._v("EventBus")]),e._v(" 通过新建一个 "),v("code",[e._v("Vue")]),e._v(" 事件 "),v("code",[e._v("bus")]),e._v(" 对象，然后通过 "),v("code",[e._v("bus.$emit")]),e._v(" 触发事件，"),v("code",[e._v("bus.$on")]),e._v(" 监听触发的事件。")]),e._v(" "),v("h2",{attrs:{id:"_3-attrs-listeners-适用于父-子-孙组件通讯"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-attrs-listeners-适用于父-子-孙组件通讯"}},[e._v("#")]),e._v(" 3."),v("code",[e._v("$attrs")]),e._v(" / "),v("code",[e._v("$listeners")]),e._v("[适用于父---子---孙组件通讯]")]),e._v(" "),v("p",[e._v("​      "),v("code",[e._v("$attrs")]),e._v("：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ("),v("code",[e._v("class")]),e._v(" 和 "),v("code",[e._v("style")]),e._v(" 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定属性 (class和 "),v("code",[e._v("style")]),e._v(" 除外)，并且可以通过 "),v("code",[e._v('v-bind="$attrs"')]),e._v(" 传入内部组件。")]),e._v(" "),v("p",[v("code",[e._v("$listeners")]),e._v("：包含了父作用域中的 (不含 "),v("code",[e._v(".native")]),e._v(" 修饰器的) "),v("code",[e._v("v-on")]),e._v(" 事件监听器。它可以通过 "),v("code",[e._v('v-on="$listeners"')]),e._v(" 传入内部组件。")]),e._v(" "),v("h2",{attrs:{id:"_4-vuex"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-vuex"}},[e._v("#")]),e._v(" 4.vuex")]),e._v(" "),v("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://img-1302744895.cos.ap-hongkong.myqcloud.com/img/vuex.png"}}),e._v(" "),v("p",[e._v("Vuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。")]),e._v(" "),v("h2",{attrs:{id:"_5-provide-inject"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-provide-inject"}},[e._v("#")]),e._v(" 5."),v("code",[e._v("provide")]),e._v(" / "),v("code",[e._v("inject")])]),e._v(" "),v("p",[e._v("​    "),v("strong",[e._v("以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效")]),e._v("。（祖先组件中通过provider来提供变量，然后在子孙组件中通过inject来注入变量。）")]),e._v(" "),v("p",[v("strong",[e._v("provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系")]),e._v("。")]),e._v(" "),v("h2",{attrs:{id:"_6-parent-children与-ref"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-parent-children与-ref"}},[e._v("#")]),e._v(" 6."),v("code",[e._v("$parent")]),e._v(" / "),v("code",[e._v("$children")]),e._v("与 "),v("code",[e._v("ref")])]),e._v(" "),v("p",[v("code",[e._v("ref")]),e._v("：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")]),e._v(" "),v("p",[v("code",[e._v("$parent")]),e._v(" / "),v("code",[e._v("$children")]),e._v("：访问父 / 子实例")]),e._v(" "),v("p",[e._v("注：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。")]),e._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结：")]),e._v(" "),v("p",[e._v("常见使用场景可以分为三类：")]),e._v(" "),v("ul",[v("li",[e._v("父子通信： 父向子传递数据是通过 props，子向父是通过 events（"),v("code",[e._v("$emit")]),e._v("）；通过父链 / 子链也可以通信（"),v("code",[e._v("$parent")]),e._v(" / "),v("code",[e._v("$children")]),e._v("）；ref 也可以访问组件实例；provide / inject API；"),v("code",[e._v("$attrs/$listeners")])]),e._v(" "),v("li",[e._v("兄弟通信： Bus；Vuex")]),e._v(" "),v("li",[e._v("跨级通信： Bus；Vuex；provide / inject API、"),v("code",[e._v("$attrs/$listeners")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);